<?php

use yii\di\ServiceLocator;

defined('YII_DEBUG') or define('YII_DEBUG', false);
defined('YII_ENV') or define('YII_ENV', 'dev');

//Composer autoload
require __DIR__ . '/vendor/autoload.php';

//Yii
require 'vendor/yiisoft/yii2/Yii.php';

error_reporting(E_ALL & ~E_DEPRECATED);

$config = require __DIR__ . '/common/config/console.php';

$app = new \yii\web\Application($config);
$app->db->open();

$app->run();


?>

<b>Консольные команды (контроллеры) ./yii</b>
<p>
    Для реализации функционала необходимо создать файл (по умолчанию yii в ./)
    <br>
    Который имеет стандартизированный вид, в нем указывается в т.ч. путь к файлу конфигурации консоли.
    <br>
    Файл конфигурации по сути возвращает массив с конфигурациями, в нем должны быть обязательно определенны параметры -
    'id' и 'basePath', а также подключаемые компоненты.
    <br>
    При определении компонентов их ключом является название компонента, а значением массив с конфигурацией, где
    обязательно указывать пространство имен класса компонента.
</p>

<b>Миграции</b>
<p>
    Миграции это консольные команды для управления базами данных в приложении. Сама по себе миграция помогает проводить
    обновления баз данных в команде разработке (создание таблиц, добавление и изменение существующих записей таблиц).
    Соответственно для работы этой команды необходимо добавить настройки подключения к БД, например в компонентах в
    файле конфигурации.
    <br>
    При создании новой миграции (migrate/create (name)) создается новый класс, в котором есть два метода up() и down().
    В метод <b>down()</b> записывается код для отката миграции (если это возможно), если откат невозможно, можно в нем
    прописать return false. В метод <b>up()</b> прописывается код для обновления базы данных.
    <br>
    При написании запросов к базе данных следует использовать предопределенные yii константы, который будут принимать
    соответствующий вид в зависимости от используемой базы данных. Тем не менее ничто не мешает использовать конкретный
    язык запросов.
    <br>
    В случае, если БД поддерживает транзакции, то можно использовать методы <b>safeUp()</b> и <b>safeDown()</b> вместо
    <b>up()</b> и <b>down()</b>. Это нужно в случае комплексного обновления БД со сложными миграциями и если одна из
    миграций не пройдет успешно, то все предыдущие также отменятся.
</p>


Валидация данных в моделях - rules() - базовые валидаторы yii, собственные валидаторы

Создание моделей/записей - сохранение в базу данных
Обновление моделей/записей
Удаление
<br>